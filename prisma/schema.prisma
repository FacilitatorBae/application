// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider          = "mysql"
    url               = env("DATABASE_URL")
    shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
    relationMode      = "prisma"
}

model Account {
    id                String  @id @default(uuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(uuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id              String        @id @default(uuid())
    name            String?
    email           String?       @unique
    emailVerified   DateTime?
    privacyAccepted DateTime?
    image           String?
    addressId       Int           @default(0)
    address         Address       @relation(fields: [addressId], references: [id])
    paymentMethodId Int           @default(0)
    paymentMethod   PaymentMethod @relation(fields: [paymentMethodId], references: [id])
    createdAt       DateTime      @default(now())
    deletedAt       DateTime?
    displayName     String?
    firstName       String?
    lastName        String?
    password        String?
    updatedAt       DateTime      @updatedAt
    accounts        Account[]
    sessions        Session[]
}

model Address {
    id             Int       @id @default(autoincrement())
    address        String
    addressDetails String?
    zipCode        String
    state          String    @unique
    country        String?
    createdAt      DateTime  @default(now())
    deletedAt      DateTime?
    updatedAt      DateTime  @updatedAt
    User           User[]
}

model PaymentMethod {
    id             Int       @id @default(autoincrement())
    cardCompany    String
    cardNumber     String?
    expirationDate DateTime
    createdAt      DateTime  @default(now())
    deletedAt      DateTime?
    updatedAt      DateTime  @updatedAt
    User           User[]
}

model Product {
    id          Int      @id @default(autoincrement())
    title       String
    description String   @db.Text
    isNew       Boolean  @default(false)
    isBusiness  Boolean  @default(false)
    isHot       Boolean  @default(false)
    pictures    String   @db.Text
    price       Int
    fee         Int
    owner       String   @default("Germ√°n Beder")
    categoryId  Int
    category    Category @relation(fields: [categoryId], references: [id])
}

model Category {
    id        Int        @id @default(autoincrement())
    name      String
    parentId  Int?
    parent    Category?  @relation("ParentCategory", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
    createdAt DateTime   @default(now())
    deletedAt DateTime?
    category  Category[] @relation("ParentCategory")
    product   Product[]
}
